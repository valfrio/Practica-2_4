{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pr\u00e1ctica 2.4 \u2013 Balanceo de carga con proxy inverso en Nginx","text":""},{"location":"#ips","title":"IPs","text":"<p>Para esta pr\u00e1ctica las IPs de mis servidores han sido:</p> <ul> <li>ip webserver1 192.168.43.47</li> <li>ip webserver2 192.168.43.46</li> <li>ip proxy 192.168.43.101</li> </ul>"},{"location":"#configuracion-de-los-webservers","title":"Configuraci\u00f3n de los webservers","text":"<p>Para ello primero debemos que cambiar el nombre de webserver por webserver1 en todos los sitios que aparezca. Para ello primer eliminamos el enlace simb\u00f3lico en el servidor 1:</p> <p></p> <p>Cambiamos el nombre de la carpeta del servidor y creamos la ruta /var/www/webserver1/html . Ahora esta ser\u00e1 la ruta de nuestra pagina web</p> <p></p> <p>Ahora debemos quitar la p\u00e1gina web que descargamos en la pr\u00e1ctica anterior y remplazarlo por el siguiente html:</p> <p></p> <p>Que para el server 1 quedar\u00eda:</p> <p></p> <p>Cambiamos el nombre a los archivos de configuraci\u00f3n:</p> <p></p> <p>Ahora el paso m\u00e1s importante, el archivo de configuraci\u00f3n. Solo tenemos que cambiar el nombre del servidor y de la cabecera a webserver1 y Serv_Web1_salva para la cabecera:</p> <p></p> <p>Por \u00faltimo volvemos a crear el enlace simb\u00f3lico:</p> <p></p> <p>Reiniciamos el servicio y ahora debemos de clonar el webserver que acabamos de hacer pero eligiendo la opci\u00f3n de virtual box que nos da una nueva direcci\u00f3n MAC. Esto es para que el router le asigne una nueva IP. </p> <p>Repetimos todo el proceso de la misma forma:</p> <p></p> <p>Creamos el html con el nombre bien puesto:</p> <p></p> <p>Cambiamos nombre</p> <p></p> <p></p> <p>Una vez hecho volvemos a crear el enlace simb\u00f3lico</p> <p></p> <p>Ahora debemos de cambiar el archivo de configuraci\u00f3n de la misma forma:</p> <p></p>"},{"location":"#configuracion-del-balanceador-de-carga","title":"Configuraci\u00f3n del balanceador de carga","text":"<p>Ahora debemos de cambiar el nombre de lso archivos de configuraci\u00f3n por balanceo</p> <p></p> <p>Ahora el paso clave. Debemos de cambiar el archivo de configuraci\u00f3n para que el proxy-balanceador de carga redirija el tr\u00e1fico a los dos servidores. Para ello debemos cambiar el archivo para que tenga este formato:</p> <pre><code> upstream backend_hosts {\n                random;\n                server ________:____;\n                server ________:____;\n    }\n            server {\n                listen 80;\n                server_name ________;      \n                location / {\n                    proxy_pass http://backend_hosts;\n                }\n            }\n</code></pre> <p>El bloque de server se encarga de redirigir el tr\u00e1fico a los backend_hosts. Estos son el grupo de servidores definidos arriba en el bloque de upstream. Este bloque se encarga de la redirecci\u00f3n y de que patr\u00f3n seguir, en nuestro caso random para mayor simplicidad. Ah\u00ed a\u00f1adiremos los servidores, donde la primera raya es donde tiene que estar la ip del servidor y en la siguiente raya despu\u00e9s de los dos puntos el puerto que escucha el servidor. </p> <p>El archivo de configuraci\u00f3n en mi caso qued\u00f3:</p> <p></p> <p>Ahora entramos para comprobar que funciona</p> <p></p> <p>Podemos ver que nos ha servido el primer servidor. Si recargamos las suficientes veces veremos que nos servir\u00e1 el segundo servidor</p> <p></p> <p>Podemos ver los logs de acceso para mayor seguridad:</p> <p></p> <p></p> <p>Ahora veremos que el balanceador comprueba que los servicios est\u00e9n activos a la hora de redirigir. Pararemos el servicio en ambas m\u00e1quinas y veremos que efectivamente redirige a la otra todo el rato. Comenzamos con el primer servidor:</p> <p></p> <p>Efectivamente me redirigi\u00f3 solo al servidor 2.</p> <p></p> <p>Iniciamos de nuevo el servicio</p> <p></p> <p>Y hacemos lo mismo con el webserver2</p> <p></p> <p></p>"},{"location":"#cuestiones-finales","title":"Cuestiones finales","text":""},{"location":"#cuestion-1","title":"Cuesti\u00f3n 1","text":"<p>Los siguientes m\u00e9todos encontrados son los m\u00e1s comunes que he visto:</p> <ul> <li> <p>Round Robin: Asigna solicitudes secuencialmente entre los servidores.</p> </li> <li> <p>Least Connections: Env\u00eda la solicitud al servidor con menos conexiones activas.</p> </li> <li> <p>IP Hash: Utiliza la IP del cliente para definir siempre el mismo servidor en funci\u00f3n de su direcci\u00f3n</p> </li> </ul>"},{"location":"#cuestion-2","title":"Cuesti\u00f3n 2","text":"<p>El bloque de server se encarga de redirigir el tr\u00e1fico a los backend_hosts. Estos son el grupo de servidores definidos arriba en el bloque de upstream. Este bloque se encarga de la redirecci\u00f3n y de que patr\u00f3n seguir. Ah\u00ed a\u00f1adiremos los servidores, donde la primera raya es donde tiene que estar la ip del servidor y en la siguiente raya despu\u00e9s de los dos puntos el puerto que escucha el servidor. </p>"},{"location":"#cuestion-3","title":"Cuesti\u00f3n 3","text":"<p>Deber\u00edamos seguir dos pasos:</p> <ul> <li> <p>Definir el bloque upstream  para a\u00f1adir la ip y los puertos de las peticiones, as\u00ed a\u00f1adiendo la funci\u00f3n de balanceador.</p> </li> <li> <p>Definir en el bloque location el proxy_pass que redirija las peticiones a los servidores definidos en el upstream.</p> </li> </ul>"}]}